C251 COMPILER V5.60.0,  main                                                               20/07/23  16:49:12  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\OutPut\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\main.lst) OBJECT(.\O
                    -utPut\main.obj) 

stmt  level    source

    1          #include ".\comm\head.h"
    2          
    3          #define MAIN_Fosc        12000000L   //¶¨ÒåÖ÷Ê±ÖÓ£¨¾«È·¼ÆËã115200²¨ÌØÂÊ£©
    4          #define Baudrate      115200L
    5          #define TM            (65536 -(MAIN_Fosc/Baudrate/4))
    6          
    7          
    8          /*************  ±¾µØ³£Á¿ÉùÃ÷    **************/
    9          
   10          #define ADC_SPEED       15              /* 0~15, ADC×ª»»Ê±¼ä(CPUÊ±ÖÓÊı) = (n+1)*32  ADCCFG */
   11          #define RES_FMT         (1<<5)  /* ADC½á¹û¸ñÊ½ 0: ×ó¶ÔÆë, ADC_RES: D11 D10 D9 D8 D7 D6 D5 D4, ADC_RESL: D3 D2 D1 
             -D0 0 0 0 0 */
   12                                                                  /* ADCCFG      1: ÓÒ¶ÔÆë, ADC_RES: 0 0 0 0 D11 D10 D9 D8, ADC_RESL: D7 D6 D5 D4 D3 D2 D1 D0 */
   13          
   14          /*************  ±¾µØ±äÁ¿ÉùÃ÷    **************/
   15          
   16          
   17          /*************  ±¾µØº¯ÊıÉùÃ÷    **************/
   18          
   19          void    delay_ms(u8 ms);
   20          void    ADC_convert(u8 chn);    //chn=0~7¶ÔÓ¦P1.0~P1.7, chn=8~14¶ÔÓ¦P0.0~P0.6, chn=15¶ÔÓ¦BandGapµçÑ¹
   21          u16     Get_ADC12bitResult(u8 channel);
   22          
   23          /******************** ´®¿Ú´òÓ¡º¯Êı ********************/
   24          //void UartInit(void)
   25          //{
   26          //      S2_S = 1;       //UART2 switch to: 0: P1.0 P1.1,  1: P4.6 P4.7
   27          //    S2CFG |= 0x01;  //Ê¹ÓÃ´®¿Ú2Ê±£¬W1Î»±ØĞèÉèÖÃÎª1£¬·ñÔò¿ÉÄÜ»á²úÉú²»¿ÉÔ¤ÆÚµÄ´íÎó
   28          //      S2CON = (S2CON & 0x3f) | 0x40; 
   29          //      T2L  = TM;
   30          //      T2H  = TM>>8;
   31          //      AUXR |= 0x14;         //¶¨Ê±Æ÷2Ê±ÖÓ1TÄ£Ê½,¿ªÊ¼¼ÆÊ±
   32          //}
   33          
   34          //void UartPutc(unsigned char dat)
   35          //{
   36          //      S2BUF  = dat; 
   37          //      while(S2TI == 0);
   38          //      S2TI = 0;    //Clear Tx flag
   39          //}
   40          
   41          //char putchar(char c)
   42          //{
   43          //      UartPutc(c);
   44          //      return c;
   45          //}
   46          
   47          /**********************************************/
   48          void main(void)
   49          {
   50   1              u8      i;
   51   1      
   52   1          WTST = 0;  //ÉèÖÃ³ÌĞòÖ¸ÁîÑÓÊ±²ÎÊı£¬¸³ÖµÎª0¿É½«CPUÖ´ĞĞÖ¸ÁîµÄËÙ¶ÈÉèÖÃÎª×î¿ì
   53   1          EAXFR = 1; //À©Õ¹¼Ä´æÆ÷(XFR)·ÃÎÊÊ¹ÄÜ
   54   1          CKCON = 0; //Ìá¸ß·ÃÎÊXRAMËÙ¶È
   55   1      
   56   1          P0M1 = 0x7f;   P0M0 = 0x00;   //ÉèÖÃÎª¸ß×èÊäÈë
   57   1          P1M1 = 0xfb;   P1M0 = 0x00;   //ÉèÖÃÎª¸ß×èÊäÈë
C251 COMPILER V5.60.0,  main                                                               20/07/23  16:49:12  PAGE 2   

   58   1          P2M1 = 0x3c;   P2M0 = 0x3c;   //ÉèÖÃP2.2~P2.5ÎªÂ©¼«¿ªÂ·(ÊµÑéÏä¼ÓÁËÉÏÀ­µç×èµ½3.3V)
   59   1          P3M1 = 0x50;   P3M0 = 0x50;   //ÉèÖÃP3.4¡¢P3.6ÎªÂ©¼«¿ªÂ·(ÊµÑéÏä¼ÓÁËÉÏÀ­µç×èµ½3.3V)
   60   1          P4M1 = 0x3c;   P4M0 = 0x3c;   //ÉèÖÃP4.2~P4.5ÎªÂ©¼«¿ªÂ·(ÊµÑéÏä¼ÓÁËÉÏÀ­µç×èµ½3.3V)
   61   1          P5M1 = 0x1c;   P5M0 = 0x0c;   //ÉèÖÃP5.2¡¢P5.3ÎªÂ©¼«¿ªÂ·(ÊµÑéÏä¼ÓÁËÉÏÀ­µç×èµ½3.3V)£¬ÉèÖÃP5.4Îª¸ß×èÊäÈ
             -ë
   62   1          P6M1 = 0xff;   P6M0 = 0xff;   //ÉèÖÃÎªÂ©¼«¿ªÂ·(ÊµÑéÏä¼ÓÁËÉÏÀ­µç×èµ½3.3V)
   63   1          P7M1 = 0x00;   P7M0 = 0x00;   //ÉèÖÃÎª×¼Ë«Ïò¿Ú
   64   1      
   65   1              ADCTIM = 0x3f;  //ÉèÖÃÍ¨µÀÑ¡ÔñÊ±¼ä¡¢±£³ÖÊ±¼ä¡¢²ÉÑùÊ±¼ä
   66   1              ADCCFG = RES_FMT + ADC_SPEED;
   67   1              //ADCÄ£¿éµçÔ´´ò¿ªºó£¬ĞèµÈ´ı1ms£¬MCUÄÚ²¿ADCµçÔ´ÎÈ¶¨ºóÔÙ½øĞĞAD×ª»»
   68   1              ADC_CONTR = 0x80 + 0;   //ADC on + channel
   69   1      
   70   1      //      UartInit();
   71   1              UART1_config(2);
   72   1              EA = 1;
   73   1              printf("ÄÏ¶¼Æû³µµç×Ó×èÖµ¼ì²â£¬°æ±¾ºÅ£ºVer%02d.%02d!\r\n",Major_Ver,Minor_Ver);
   74   1      
   75   1              while (1)
   76   1              {
   77   2                      for(i=0; i<16; i++)
   78   2                      {
   79   3                              delay_ms(200);
   80   3                              //ADC_convert(3);               //·¢ËÍ¹Ì¶¨Í¨µÀADÖµ
   81   3      
   82   3                              ADC_convert(i);         //·¢ËÍÂÖÑ¯Í¨µÀADÖµ
   83   3                              if((i & 7) == 7)        //·ÖÁ½ĞĞ´òÓ¡
   84   3                              {
   85   4                                      printf("\r\n");
   86   4                              }
   87   3                      }
   88   2              }
   89   1      }
   90          
   91          
   92          //========================================================================
   93          // º¯Êı: u16 Get_ADC12bitResult(u8 channel))    //channel = 0~15
   94          // ÃèÊö: ²éÑ¯·¨¶ÁÒ»´ÎADC½á¹û.
   95          // ²ÎÊı: channel: Ñ¡ÔñÒª×ª»»µÄADC, 0~15.
   96          // ·µ»Ø: 12Î»ADC½á¹û.
   97          // °æ±¾: V1.0, 2016-4-28
   98          //========================================================================
   99          u16     Get_ADC12bitResult(u8 channel)  //channel = 0~15
  100          {
  101   1              ADC_RES = 0;
  102   1              ADC_RESL = 0;
  103   1      
  104   1          ADC_CONTR = (ADC_CONTR & 0xf0) | channel; //ÉèÖÃADC×ª»»Í¨µÀ
  105   1          ADC_START = 1;//Æô¶¯ADC×ª»»
  106   1          _nop_();
  107   1              _nop_();
  108   1              _nop_();
  109   1              _nop_();
  110   1          while(ADC_FLAG == 0);   //wait for ADC finish
  111   1          ADC_FLAG = 0;     //Çå³ıADC½áÊø±êÖ¾
  112   1              return (((u16)ADC_RES << 8) | ADC_RESL);
  113   1      }
  114          
  115          #define         SUM_LENGTH      16      /* Æ½¾ùÖµ²ÉÑù´ÎÊı ×î´óÖµ16 */
  116          
  117          /***********************************
  118          ²éÑ¯·½Ê½×öÒ»´ÎADC, chnÎªÍ¨µÀºÅ, chn=0~7¶ÔÓ¦P1.0~P1.7, chn=8~14¶ÔÓ¦P0.0~P0.6, chn=15¶ÔÓ¦BandGapµçÑ¹.
  119          ***********************************/
  120          void ADC_convert(u8 chn)
  121          {
  122   1              u16     j;
C251 COMPILER V5.60.0,  main                                                               20/07/23  16:49:12  PAGE 3   

  123   1              u8      k;              //Æ½¾ùÖµÂË²¨Ê±Ê¹ÓÃ
  124   1      
  125   1              Get_ADC12bitResult(chn);                //²ÎÊıi=0~15,²éÑ¯·½Ê½×öÒ»´ÎADC, ÇĞ»»Í¨µÀºóµÚÒ»´Î×ª»»½á¹û¶ªÆú. ±ÜÃâ²ÉÑùµçÈİµÄ²Ğ
             -´æµçÑ¹Ó°Ïì.
  126   1              Get_ADC12bitResult(chn);                //²ÎÊıi=0~15,²éÑ¯·½Ê½×öÒ»´ÎADC, ÇĞ»»Í¨µÀºóµÚ¶ş´Î×ª»»½á¹û¶ªÆú. ±ÜÃâ²ÉÑùµçÈİµÄ²Ğ
             -´æµçÑ¹Ó°Ïì.
  127   1              for(k=0, j=0; k<SUM_LENGTH; k++)        j += Get_ADC12bitResult(chn);   // ²ÉÑùÀÛ¼ÓºÍ, ²ÎÊı0~15,²éÑ¯·½Ê½×öÒ»´ÎADC
             -, ·µ»ØÖµ¾ÍÊÇ½á¹û
  128   1              j = j / SUM_LENGTH;             // ÇóÆ½¾ù
  129   1      
  130   1              if(chn == 15)   printf("Bandgap=%04d  ",j);     //ÄÚ»ù×¼ 1.19V
  131   1              else            //ADC0~ADC14
  132   1              {
  133   2                      printf("ADC%02d=%04d  ",chn,j);
  134   2              }
  135   1      }
  136          
  137          //========================================================================
  138          // º¯Êı: void delay_ms(u8 ms)
  139          // ÃèÊö: ÑÓÊ±º¯Êı¡£
  140          // ²ÎÊı: ms,ÒªÑÓÊ±µÄmsÊı, ÕâÀïÖ»Ö§³Ö1~255ms. ×Ô¶¯ÊÊÓ¦Ö÷Ê±ÖÓ.
  141          // ·µ»Ø: none.
  142          // °æ±¾: VER1.0
  143          // ÈÕÆÚ: 2013-4-1
  144          // ±¸×¢: 
  145          //========================================================================
  146          void delay_ms(u8 ms)
  147          {
  148   1              u16 i;
  149   1              do
  150   1              {
  151   2                      i = MAIN_Fosc / 6000;
  152   2                      while(--i);
  153   2              }while(--ms);
  154   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       296     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        79     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
